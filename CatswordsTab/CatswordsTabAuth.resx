<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>